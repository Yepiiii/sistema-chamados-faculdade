# Script para iniciar API e Mobile juntos
# Uso: .\IniciarSistema.ps1

param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("windows", "android")]
    [string]$Plataforma = "windows"
)

Clear-Host
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "  Sistema de Chamados - Inicializacao" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

$scriptPath = Split-Path -Parent $MyInvocation.MyCommand.Path
$repoPath = $scriptPath
$solutionRoot = Split-Path -Parent $repoPath
Set-Location $repoPath

# Fechar processos anteriores (opcional)
Write-Host "Verificando processos anteriores..." -ForegroundColor Yellow
$apiProcess = Get-Process | Where-Object {$_.ProcessName -eq "SistemaChamados"}
if ($apiProcess) {
    Write-Host "Finalizando API anterior..." -ForegroundColor Yellow
    Stop-Process -Name "SistemaChamados" -Force -ErrorAction SilentlyContinue
    Start-Sleep -Seconds 2
}

# Iniciar API em background
Write-Host "Iniciando API..." -ForegroundColor Green
$apiJob = Start-Job -ScriptBlock {
    Set-Location $using:repoPath
    dotnet run --project SistemaChamados.csproj --urls http://localhost:5246
}

Write-Host "Aguardando API inicializar..." -ForegroundColor Yellow
Start-Sleep -Seconds 8

# Testar se API est√° rodando
$tentativas = 0
$maxTentativas = 10
$apiOk = $false

while ($tentativas -lt $maxTentativas -and -not $apiOk) {
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:5246/swagger/index.html" -Method GET -TimeoutSec 2 -ErrorAction Stop
        if ($response.StatusCode -ge 200 -and $response.StatusCode -lt 500) {
            Write-Host "[OK] API rodando em http://localhost:5246" -ForegroundColor Green
            $apiOk = $true
        }
        else {
            throw "Status code: $($response.StatusCode)"
        }
    }
    catch {
        $tentativas++
        Write-Host "Aguardando API... ($tentativas/$maxTentativas)" -ForegroundColor Yellow
        Start-Sleep -Seconds 2
    }
}

if (-not $apiOk) {
    Write-Host ""
    Write-Host "[ERRO] API nao conseguiu iniciar!" -ForegroundColor Red
    Write-Host "Verificando output da API:" -ForegroundColor Yellow
    Receive-Job -Job $apiJob
    Stop-Job -Job $apiJob
    Remove-Job -Job $apiJob
    exit 1
}

Write-Host ""
Write-Host "Iniciando aplicativo mobile ($Plataforma)..." -ForegroundColor Green
Write-Host ""

# Iniciar mobile
Set-Location $repoPath
$mobilePath = Join-Path $solutionRoot "SistemaChamados.Mobile"
if (-not (Test-Path $mobilePath)) {
    Write-Host "[ERRO] Pasta da aplica√ß√£o mobile n√£o encontrada em $mobilePath" -ForegroundColor Red
    Stop-Job -Job $apiJob
    Remove-Job -Job $apiJob
    exit 1
}
Set-Location $mobilePath

if ($Plataforma -eq "windows") {
    Write-Host "Executando: dotnet build -t:Run -f net8.0-windows10.0.19041.0" -ForegroundColor Cyan
    dotnet build -t:Run -f net8.0-windows10.0.19041.0
    
    Write-Host ""
    Write-Host "========================================" -ForegroundColor Green
    Write-Host "  APP MOBILE INICIADO NO WINDOWS!" -ForegroundColor Green
    Write-Host "========================================" -ForegroundColor Green
    Write-Host ""
    
    Write-Host "üéØ TESTE AS NOVAS FUNCIONALIDADES:" -ForegroundColor Yellow
    Write-Host ""
    
    Write-Host "1Ô∏è‚É£  NOTIFICA√á√ïES (TESTE R√ÅPIDO - 30 segundos):" -ForegroundColor Cyan
    Write-Host "   - Fa√ßa login no app" -ForegroundColor Gray
    Write-Host "   - Na lista de chamados, procure o bot√£o üîî (LARANJA)" -ForegroundColor Gray
    Write-Host "   - CLIQUE NO BOT√ÉO üîî" -ForegroundColor White
    Write-Host "   - Veja o alerta de confirma√ß√£o" -ForegroundColor Gray
    Write-Host "   - Notifica√ß√µes aparecer√£o na Central de A√ß√µes do Windows" -ForegroundColor Gray
    Write-Host "   - Clique em uma notifica√ß√£o para navegar ao chamado" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "2Ô∏è‚É£  COMENTARIOS:" -ForegroundColor Cyan
    Write-Host "   - Abra um chamado" -ForegroundColor Gray
    Write-Host "   - Role ate Comentarios" -ForegroundColor Gray
    Write-Host "   - Digite um comentario e envie" -ForegroundColor Gray
    Write-Host "   - Deve aparecer instantaneamente com seu avatar" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "3Ô∏è‚É£  UPLOAD DE ARQUIVOS:" -ForegroundColor Cyan
    Write-Host "   - Na tela de detalhes, role ate Anexos" -ForegroundColor Gray
    Write-Host "   - Clique em Adicionar Anexo" -ForegroundColor Gray
    Write-Host "   - Selecione uma imagem" -ForegroundColor Gray
    Write-Host "   - Verifique o thumbnail aparece" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "4Ô∏è‚É£  TIMELINE DE HIST√ìRICO:" -ForegroundColor Cyan
    Write-Host "   - Role ate Historico" -ForegroundColor Gray
    Write-Host "   - Veja eventos cronologicos com icones e cores" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "5Ô∏è‚É£  POLLING AUTOM√ÅTICO:" -ForegroundColor Cyan
    Write-Host "   - Deixe o app aberto por 5 minutos" -ForegroundColor Gray
    Write-Host "   - OU use o botao de notificacao para teste imediato!" -ForegroundColor White
    Write-Host ""
}
elseif ($Plataforma -eq "android") {
    # Verificar configura√ß√£o para Android
    $config = Get-Content "appsettings.json" -Raw
    if ($config -match "localhost" -and $config -notmatch "10\.0\.2\.2") {
        Write-Host "[AVISO] appsettings.json usa 'localhost'" -ForegroundColor Yellow
        Write-Host "        Para emulador Android funcionar, altere para '10.0.2.2'" -ForegroundColor Yellow
        Write-Host ""
        $alterar = Read-Host "Deseja alterar automaticamente? (S/N)"
        if ($alterar -eq "S" -or $alterar -eq "s") {
            $config = $config -replace "localhost:5246", "10.0.2.2:5246"
            $config | Set-Content "appsettings.json"
            Write-Host "[OK] Configuracao atualizada!" -ForegroundColor Green
        }
    }
    
    Write-Host "Executando: dotnet build -t:Run -f net8.0-android" -ForegroundColor Cyan
    dotnet build -t:Run -f net8.0-android
    
    Write-Host ""
    Write-Host "========================================" -ForegroundColor Green
    Write-Host "  APP MOBILE INICIADO NO ANDROID!" -ForegroundColor Green
    Write-Host "========================================" -ForegroundColor Green
    Write-Host ""
    
    Write-Host "üéØ TESTE AS NOVAS FUNCIONALIDADES:" -ForegroundColor Yellow
    Write-Host ""
    
    Write-Host "1Ô∏è‚É£  NOTIFICA√á√ïES (TESTE R√ÅPIDO - 30 segundos):" -ForegroundColor Cyan
    Write-Host "   - Faca login no app" -ForegroundColor Gray
    Write-Host "   - Na lista de chamados, procure o botao de notificacao (LARANJA)" -ForegroundColor Gray
    Write-Host "   - TOQUE NO BOTAO" -ForegroundColor White
    Write-Host "   - Veja o alerta de confirmacao" -ForegroundColor Gray
    Write-Host "   - Puxe a barra de notificacoes do Android" -ForegroundColor Gray
    Write-Host "   - Deve ver 3 notificacoes com cores diferentes" -ForegroundColor Gray
    Write-Host "   - Toque em uma notificacao para navegar ao chamado" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "2Ô∏è‚É£  COMENT√ÅRIOS:" -ForegroundColor Cyan
    Write-Host "   - Abra um chamado" -ForegroundColor Gray
    Write-Host "   - Role ate Comentarios" -ForegroundColor Gray
    Write-Host "   - Digite um comentario e envie" -ForegroundColor Gray
    Write-Host "   - Deve aparecer instantaneamente com seu avatar" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "3Ô∏è‚É£  UPLOAD DE ARQUIVOS:" -ForegroundColor Cyan
    Write-Host "   - Na tela de detalhes, role ate Anexos" -ForegroundColor Gray
    Write-Host "   - Toque em Adicionar Anexo" -ForegroundColor Gray
    Write-Host "   - Selecione uma imagem da galeria ou tire foto" -ForegroundColor Gray
    Write-Host "   - Verifique o thumbnail aparece" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "4Ô∏è‚É£  TIMELINE DE HIST√ìRICO:" -ForegroundColor Cyan
    Write-Host "   - Role ate Historico" -ForegroundColor Gray
    Write-Host "   - Veja eventos cronologicos com icones e cores" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "5Ô∏è‚É£  POLLING AUTOM√ÅTICO:" -ForegroundColor Cyan
    Write-Host "   - Deixe o app aberto por 5 minutos" -ForegroundColor Gray
    Write-Host "   - OU use o botao de notificacao para teste imediato!" -ForegroundColor White
    Write-Host ""
    
    Write-Host "üìö DOCUMENTA√á√ÉO:" -ForegroundColor Yellow
    Write-Host "   - SistemaChamados.Mobile\\TESTE_COMPLETO.md" -ForegroundColor Gray
    Write-Host "   - SistemaChamados.Mobile\\POLLING_NOTIFICATIONS_GUIDE.md" -ForegroundColor Gray
    Write-Host ""
}

Set-Location $repoPath

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "üéâ TODAS AS 5 FEATURES IMPLEMENTADAS:" -ForegroundColor Green
Write-Host "   ‚úÖ Timeline de Hist√≥rico" -ForegroundColor Green
Write-Host "   ‚úÖ Thread de Coment√°rios" -ForegroundColor Green
Write-Host "   ‚úÖ Upload de Imagens/Arquivos" -ForegroundColor Green
Write-Host "   ‚úÖ Polling Service (Timer 5min)" -ForegroundColor Green
Write-Host "   ‚úÖ Notifica√ß√µes Locais" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# Ao finalizar, perguntar se quer parar a API
$parar = Read-Host "Deseja parar a API? (S/N)"
if ($parar -eq "S" -or $parar -eq "s") {
    Write-Host "Parando API..." -ForegroundColor Yellow
    Stop-Job -Job $apiJob
    Remove-Job -Job $apiJob
    Write-Host "[OK] API parada" -ForegroundColor Green
}
else {
    Write-Host ""
    Write-Host "[INFO] API ainda esta rodando em background" -ForegroundColor Cyan
    $jobId = $apiJob.Id
    Write-Host "       Job ID: $jobId" -ForegroundColor Cyan
    Write-Host "       Para parar depois: Stop-Job -Id $jobId; Remove-Job -Id $jobId" -ForegroundColor Yellow
}
